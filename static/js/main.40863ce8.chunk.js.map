{"version":3,"sources":["counter/StyleCounter.module.css","reportWebVitals.ts","counter/BodyCounter.tsx","counter/ButtonCounter.tsx","counter/CustomizationCounter.tsx","counter/Counter.tsx","localStorage.js","bll/counter-reducer.ts","AppRedux.tsx","bll/store.ts","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","BodyCounter","count","maxValue","className","s","bodyCounter","colorCount","ButtonCounter","name","actionCount","disabled","button","onClick","CustomizationCounter","props","customization","value","onChange","type","startValue","onChange1","secondBodyCounter","btnSet","set","Counter","btnInc","onShow","firstBodyCounter","inc","reset","setOnShow","saveState","key","obj","stateAsString","JSON","stringify","localStorage","setItem","restoreState","defaultState","getItem","parse","initialState","AppRedux","useSelector","state","counter","useDispatch","useState","setCount","setMaxValue","setStartValue","useEffect","oldStorage","event","currentTarget","aaa","bbb","newMaxValue","newStartValue","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40863ce8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"customization\":\"StyleCounter_customization__3JGaR\",\"bodyCounter\":\"StyleCounter_bodyCounter__SUrmA\",\"firstBodyCounter\":\"StyleCounter_firstBodyCounter__1Xvcc\",\"secondBodyCounter\":\"StyleCounter_secondBodyCounter__1BQaz\",\"colorCount\":\"StyleCounter_colorCount__1f28i\",\"button\":\"StyleCounter_button__2tWN2\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport s from './StyleCounter.module.css'\r\n\r\ntype BodyCounterPropsType = {\r\n    count: number;\r\n    maxValue: string\r\n}\r\n\r\nexport const BodyCounter: React.FC<BodyCounterPropsType> = ({count, maxValue}) => {\r\n    return (\r\n        <div className={`${s.bodyCounter} ${count === +maxValue ? s.colorCount : ''}`}>\r\n            {count}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './StyleCounter.module.css'\r\n\r\ntype ButtonCounterPropsType = {\r\n    name: string;\r\n    actionCount: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n    disabled: boolean\r\n}\r\nexport const ButtonCounter: React.FC<ButtonCounterPropsType>\r\n    = ({\r\n           name,\r\n           actionCount,\r\n           disabled\r\n       }) => {\r\n    return (\r\n        <button className={s.button}\r\n                disabled={disabled}\r\n                onClick={actionCount}\r\n        >\r\n            {name}\r\n        </button>\r\n    )\r\n}\r\n","import s from \"./StyleCounter.module.css\";\r\nimport {ButtonCounter} from \"./ButtonCounter\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype CustomizationCounterPropsType = {\r\n    set: () => void\r\n    startValue: string\r\n    maxValue: string\r\n    btnSet: () => boolean\r\n    onChange1: (event: ChangeEvent<HTMLInputElement>) => void\r\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const CustomizationCounter\r\n    : React.FC<CustomizationCounterPropsType>\r\n    = (props) => {\r\n    // let setButtonCount = (startNum: number, endNum: number) => {\r\n    //     setParameter(startNum, endNum)\r\n    // }\r\n    // let actionCount = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //\r\n    //\r\n    // }\r\n    // let maxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     let newMaxValue = e.currentTarget.value\r\n    // }\r\n    // let startValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     let newStartValue = e.currentTarget.value\r\n    // }\r\n\r\n    return (\r\n        <div className={s.customization}>\r\n            <div className={s.bodyCounter}>\r\n                <label>\r\n                    <span>max value <input value={props.maxValue} onChange={props.onChange} name='set'\r\n                                           type='number'/></span>\r\n                    <span>start value <input value={props.startValue} onChange={props.onChange1} name='set'\r\n                                             type='number'/></span>\r\n                </label>\r\n            </div>\r\n            <div className={s.secondBodyCounter}>\r\n                <ButtonCounter disabled={props.btnSet()} name={'set'} actionCount={props.set}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, Dispatch, SetStateAction, useEffect, useState} from 'react';\r\nimport {BodyCounter} from './BodyCounter';\r\nimport {ButtonCounter} from \"./ButtonCounter\";\r\nimport s from './StyleCounter.module.css'\r\nimport {CustomizationCounter} from \"./CustomizationCounter\";\r\n\r\ntype CounterType = {\r\n    inc: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n    reset: (defaultState: any) => void\r\n    count: number\r\n    maxValue: string\r\n    startValue: string\r\n    set: () => void\r\n    btnSet: () => boolean\r\n    onChange1: (event: ChangeEvent<HTMLInputElement>) => void\r\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void\r\n    setOnShow: Dispatch<SetStateAction<boolean>>\r\n    onShow: boolean\r\n\r\n}\r\nexport const Counter: React.FC<CounterType> = (props) => {\r\n    let btnInc = props.count === +props.maxValue ||\r\n        +props.startValue === +props.maxValue\r\n    let onShowProperties = () => {\r\n        props.setOnShow(!props.onShow)\r\n    }\r\n    return (\r\n        (!props.onShow)\r\n            ?\r\n            <div className={s.firstBodyCounter}>\r\n                <BodyCounter maxValue={props.maxValue} count={props.count}/>\r\n                <div className={s.secondBodyCounter}>\r\n                    <ButtonCounter disabled={btnInc} name={'inc'} actionCount={props.inc}/>\r\n                    <ButtonCounter disabled={false} name={'reset'} actionCount={props.reset}/>\r\n                    <ButtonCounter disabled={false} name={'type'} actionCount={onShowProperties}/>\r\n                </div>\r\n            </div>\r\n            : <CustomizationCounter\r\n                set={props.set}\r\n                startValue={props.startValue}\r\n                maxValue={props.maxValue}\r\n                btnSet={props.btnSet}\r\n                onChange1={props.onChange1}\r\n                onChange={props.onChange}\r\n            />\r\n    )\r\n}","// // вот вам функция для сохранения объектов в память браузера\r\n// // (данные в этом хранилище сохраняться даже при перезагрузке компа):\r\nexport function saveState(key, obj) {\r\n        const stateAsString = JSON.stringify(obj);\r\n        localStorage.setItem(key, stateAsString)\r\n}\r\n\r\n//\r\n// // и вот вам функция для получения сохранённого объекта в памяти браузера:\r\nexport function restoreState(key, defaultState) {\r\n    const stateAsString = localStorage.getItem(key);\r\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString);\r\n\r\n    return defaultState;\r\n}\r\n\r\n//\r\n// // ---------------------------------------------------------------------------------------------------------------\r\n// // использование:\r\n// // type StateType = {\r\n// //     x: string\r\n// //     y: number\r\n// // }\r\n//\r\n// // сохраняем объект типа StateType в ячейке \"test\"\r\n// saveState(\"test\", {x: \"A\", y: 1});\r\n//\r\n// // получем в переменную state объект из ячейки \"test\" или дэфолтный объект если ячейка пуста\r\n// const state = restoreState(\"test\", {x: \"\", y: 0});\r\n","const initialState = {\r\n    value: 0\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INC-VALUE\":\r\n            return {\r\n                ...state, value: state.value + 1\r\n            }\r\n        case \"SET-VALUE-FROM-LOCAL-STORAGE\":\r\n            return {\r\n                ...state, value: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const incValueAC = () => ({type: 'INC-VALUE'} as const)\r\nexport const setValueFromLocalStorageAC = (value: number) => ({type: 'SET-VALUE-FROM-LOCAL-STORAGE', value} as const)\r\n\r\nexport type IncValuesActionType = ReturnType<typeof incValueAC>\r\nexport type SetValueFromLocalStorageActionType = ReturnType<typeof setValueFromLocalStorageAC>\r\ntype ActionType =\r\n    IncValuesActionType | SetValueFromLocalStorageActionType","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Counter} from './counter/Counter';\nimport {CustomizationCounter} from \"./counter/CustomizationCounter\";\nimport {restoreState, saveState} from \"./localStorage\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./bll/store\";\nimport {incValueAC} from \"./bll/counter-reducer\";\n\nfunction AppRedux() {\n    const value = useSelector<AppStateType, number>(state => state.counter.value)\n\n    const dispatch = useDispatch()\n    const incHandler = () => {\n        dispatch(incValueAC())\n    }\n\n\n    let [count, setCount] = useState(0)\n    let [maxValue, setMaxValue] = useState('')\n    let [startValue, setStartValue] = useState('')\n    let [onShow, setOnShow] = useState(false)\n    useEffect(() => {\n        oldStorage()\n    }, [])\n\n\n    let incCount = () => {\n        setCount(count + 1)\n    }\n    let resetCount = (defaultState: any) => {\n        let aaa = restoreState(\"start-input-value\", defaultState)\n        setCount(+aaa)\n    }\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setMaxValue(event.currentTarget.value);\n\n    }\n\n    const onChange1 = (event: ChangeEvent<HTMLInputElement>) => {\n        setStartValue(event.currentTarget.value);\n    }\n    const set = () => {\n        if (maxValue || startValue) {\n            saveState(\"max-input-value\", maxValue)\n            saveState(\"start-input-value\", startValue)\n            setCount(+startValue)\n            setOnShow(!onShow)\n        }\n    }\n    const newSet = () => {\n        if (maxValue || startValue) {\n            saveState(\"max-input-value\", maxValue)\n            saveState(\"start-input-value\", startValue)\n            setCount(+startValue)\n        }\n    }\n    let oldStorage = () => {\n        if (!startValue && !maxValue) {\n            let aaa = restoreState(\"start-input-value\")\n            let bbb = restoreState(\"max-input-value\")\n            setStartValue(aaa)\n            setMaxValue(bbb)\n            setCount(+aaa)\n        }\n    }\n\n    let btnSet = () => {\n        let newMaxValue = restoreState(\"max-input-value\")\n        let newStartValue = restoreState(\"start-input-value\")\n        return (\n            startValue >= maxValue ||\n            startValue === newStartValue &&\n            maxValue === newMaxValue\n        )\n    }\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {/*<h1>{value}</h1>*/}\n                {/*<button onClick={incHandler}>inc</button>*/}\n                    <Counter inc={incCount}\n                             reset={resetCount}\n                             count={count}\n                             maxValue={maxValue}\n                             startValue={startValue}\n                             onShow={onShow}\n\n                             set={set}\n                             btnSet={btnSet}\n                             onChange1={onChange1}\n                             onChange={onChange}\n                             setOnShow={setOnShow}\n                    />\n                    {(!onShow) ?\n                        <CustomizationCounter\n                            set={newSet}\n                            startValue={startValue}\n                            maxValue={maxValue}\n                            btnSet={btnSet}\n                            onChange1={onChange1}\n                            onChange={onChange}\n                        /> : <div></div>}\n            </header>\n        </div>\n    );\n}\n\nexport default AppRedux;\n","import { combineReducers, createStore } from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer)\r\ntype AppStoreType = typeof store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport AppRedux from \"./AppRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <AppRedux/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}